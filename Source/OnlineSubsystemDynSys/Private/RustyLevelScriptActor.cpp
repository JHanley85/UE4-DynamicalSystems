// Fill out your copyright notice in the Description page of Project Settings.

#include "RustyLevelScriptActor.h"
#include "CoreMinimal.h"
#include "Runtime/Engine/Classes/Engine/Engine.h"
#include "SocketSubsystem.h"
#include "Runtime/Networking/Public/Networking.h"
#include "Base64.h"
#include "Runtime/PacketHandlers/PacketHandler/Public/PacketHandler.h"
#include <vector>
#include "EngineUtils.h"
#include "Runtime/Engine/Classes/Kismet/GameplayStatics.h"
#include "Runtime/Engine/Classes/GameFramework/PlayerController.h"
#include "Runtime/CoreUObject/Public/UObject/UObjectIterator.h"
#include "Runtime/Engine/Classes/Kismet/GameplayStatics.h"
#include "Runtime/Engine/Classes/GameFramework/GameSession.h"
#include "Runtime/Engine/Classes/GameFramework/GameMode.h"
#include "RustyWorldSettings.h"

void ARustyLevelScriptActor::RegisterActors() {
	UWorld* world = GetWorld();
	world = GEngine->GetWorldFromContextObject(this, EGetWorldErrorMode::Assert);
	if (world != nullptr) {
		if (world->NetDriver != nullptr) {
			UE_LOG(LogTemp, Log, TEXT("1 Driver: {%s}"), *world->NetDriver->GetClass()->GetName());
		}
	}
	TArray<AActor*> actors = TArray<AActor*>();

	UGameplayStatics::GetAllActorsOfClass((UObject*)this, AActor::StaticClass(), actors);
	if (actors.Num() > 0) {
		AActor* actor = actors[0];
		ARustyWorldSettings* settings = ((ARustyWorldSettings*)actor->GetWorld()->GetWorldSettings());
		for (auto a : actors)
		{
			if (!a->GetIsReplicated()) continue;
			int32 newId = 0;
			settings->RegisterObject(a, newId);
			a->GetClass()->StaticClass()->SetUpRuntimeReplicationData();
			TArray<UField*> NetFields = a->GetClass()->StaticClass()->NetFields;
			TArray<UProperty*> NetProperties;
			TArray<UFunction*> NetFunctions;
			for (TFieldIterator<UField> It(a->GetClass(), EFieldIteratorFlags::ExcludeSuper); It; ++It)
			{
				UProperty* P;
				UFunction* F;
				if ((P = dynamic_cast<UProperty*>(*It)) != NULL)
				{
					if (P->PropertyFlags & CPF_Net)
					{
						NetFields.Add(*It);

						if (P->GetOuter() == this || true)
						{
							NetProperties.Add(P);
						}

						const FName FuncName = P->RepNotifyFunc;
						UFunction* Func = a->FindFunction(FuncName);
						NetFunctions.Add(F);
					}
				}
				else if ((F = dynamic_cast<UFunction*>(*It)) != NULL)
				{
					// When loading reflection data (e.g. from blueprints), we may have references to placeholder functions, or reflection data 
					// in children may be out of date. In that case we cannot enforce this check, but that is ok because reflection data will
					// be regenerated by compile on load anyway:
					const bool bCanCheck = (!GIsEditor && !IsRunningCommandlet()) || !F->HasAnyFlags(RF_WasLoaded);
					check(!bCanCheck || (!F->GetSuperFunction() || (F->GetSuperFunction()->FunctionFlags&FUNC_NetFuncFlags) == (F->FunctionFlags&FUNC_NetFuncFlags)));
					if ((F->FunctionFlags&FUNC_Net) && !F->GetSuperFunction()) {
						NetFields.Add(*It);
						NetFunctions.Add(F);
					}
				}
			}
			
			UE_LOG(LogTemp, Log, TEXT("Registered %s {%s} {%u} - has {%i} fields {%i} props"), *a->GetClass()->StaticClass()->GetName(),*a->GetName(), newId, NetFields.Num(),NetProperties.Num());

			for (UField* field : NetFields) {
				UE_LOG(LogTemp, Log, TEXT("[%s][%s] field: {%s}"), *a->GetName(),*a->GetClass()->StaticClass()->GetName(),*field->GetName());

			}

			settings->RegisterFunctions(a, NetFunctions);
			settings->RegisterProperties(a, NetProperties);

		}
	}
}

void ARustyLevelScriptActor::LevelIsReady_Implementation() {
	UE_LOG(LogTemp, Warning, TEXT("Level is ready: %s"), *GetName());
	TArray<AActor*> actors = TArray<AActor*>();

	UGameplayStatics::GetAllActorsOfClass((UObject*)this, AActor::StaticClass(), actors);

	if (actors.Num() > 0) {
		AActor* actor = actors[0];
		for (auto a : actors)
		{
			int32 newId = 0;
			settings->RegisterObject(a, newId);
			UE_LOG(LogTemp, Log, TEXT("Registered object {%s} {%u}"), *a->GetName(), newId);
		}
	}
	GetWorld()->GetNetDriver();
	settings->Setup();
	auto GameMode = GetWorld()->GetAuthGameMode();
	auto GameSesssion = GameMode->GameSession;
	bIsSetup = true;
}
ARustyLevelScriptActor::ARustyLevelScriptActor(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) {
	settings = (ARustyWorldSettings*)GetWorldSettings();
}

void ARustyLevelScriptActor::Tick(float DeltaTime) {
	Super::Tick(DeltaTime);
	if (GetWorld() == nullptr) return;
	if (!bIsSetup) {
		settings = (ARustyWorldSettings*)GetWorld()->GetWorldSettings();
		if (settings != nullptr) {
			LevelIsReady();
		}
	}
}
void ARustyLevelScriptActor::BeginPlay() {
	Super::BeginPlay();
}


